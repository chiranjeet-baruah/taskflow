name: TaskFlow CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: ['1.24.x']
        os: [ubuntu-latest, macos-latest, windows-latest]

    services:
      # Redis service for backend tests
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        # Service containers aren't supported on macOS and Windows runners
        # We'll handle these cases separately in the test steps
        if: ${{ matrix.os == 'ubuntu-latest' }}

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Install Redis (macOS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew install redis
        brew services start redis

    - name: Install Redis (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        # Using Memurai as Redis alternative on Windows for CI
        choco install memurai-developer
        Start-Service Memurai

    - name: Get dependencies
      run: go mod download

    - name: Run tests
      run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...
      
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  build-examples:
    name: Build Examples
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.x'
        cache: true

    - name: Build examples
      run: |
        # Loop through all example directories and build
        for dir in examples/*; do
          if [ -d "$dir" ]; then
            echo "Building $dir..."
            (cd "$dir" && go build -v)
          fi
        done
