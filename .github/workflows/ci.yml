name: TaskFlow CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        go-version: [ '1.24.x' ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]

    # The 'services' block has been removed to avoid Docker issues on macOS
    # and rely on native installations for all OSs.

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Install and start Redis (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y redis-server
          sudo service redis-server start
          # Verify Redis is running
          redis-cli ping

      - name: Install Redis (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install redis
          brew services start redis
          # Verify Redis is running
          brew services list | grep redis
          redis-cli ping

      - name: Install Redis (Windows)
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          # Using Memurai as Redis alternative on Windows for CI
          choco install memurai-developer
          Start-Service Memurai
          # Verify Memurai (Redis) is running - specific check might vary
          # For now, assume Start-Service is sufficient or add a ping if memurai-cli is available
          # Example: & "C:\Program Files\Memurai Developer\redis-cli.exe" ping (path may vary)

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          # If you use a Codecov token, uncomment and set the secret:
          # token: ${{ secrets.CODECOV_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6.0.1
        with:
          # Optional: version of golangci-lint to use in form of v1.2.3, defaults to latest if not set
          version: v1.59.1 # Pinned version for consistency
          args: --timeout=5m

  build-examples:
    name: Build Examples
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [ test, lint ]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: Build examples
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          for dir in examples/*; do
            if [ -d "$dir" ]; then
              echo "Building $dir..."
              (cd "$dir" && go build -v)
            fi
          done